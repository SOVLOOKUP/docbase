// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { PostSearchData, PostSearchResponse, PostRetrievalData, PostRetrievalResponse, PostRetrievalError, DeletePluginData, DeletePluginResponse, GetPluginData, GetPluginResponse, PutPluginData, PutPluginResponse, GetPluginExtData, GetPluginExtResponse, PatchPluginExtData, PatchPluginExtResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Knowledge base search
 */
export const postSearch = <ThrowOnError extends boolean = false>(options?: Options<PostSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostSearchResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Search as an external knowledge base for Dify
 */
export const postRetrieval = <ThrowOnError extends boolean = false>(options?: Options<PostRetrievalData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostRetrievalResponse, PostRetrievalError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/retrieval',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a plugin
 */
export const deletePlugin = <ThrowOnError extends boolean = false>(options: Options<DeletePluginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePluginResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plugin',
        ...options
    });
};

/**
 * List plugins
 */
export const getPlugin = <ThrowOnError extends boolean = false>(options?: Options<GetPluginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPluginResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plugin',
        ...options
    });
};

/**
 * Install a plugin
 */
export const putPlugin = <ThrowOnError extends boolean = false>(options: Options<PutPluginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutPluginResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plugin',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get extension-plugin mapping
 */
export const getPluginExt = <ThrowOnError extends boolean = false>(options?: Options<GetPluginExtData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPluginExtResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plugin/ext',
        ...options
    });
};

/**
 * Modify extension-plugin mapping
 */
export const patchPluginExt = <ThrowOnError extends boolean = false>(options: Options<PatchPluginExtData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPluginExtResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plugin/ext',
        ...options
    });
};